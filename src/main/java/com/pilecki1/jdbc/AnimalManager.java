package com.pilecki1.jdbc;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.pilecki1.Zwierzaki.Animals;
import com.pilecki1.Zwierzaki.Zoo;

public class AnimalManager {
	
	private Connection connection;
	
	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	
	private String createTableAnimal = "CREATE TABLE Animal(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20), kind varchar(20), age double)";
	
	private String createTableZoo = "CREATE TABLE Zoo(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20), kind varchar(20), zoo_id bigint)";
	
	private PreparedStatement getAnimalsWithZooStmt;
	private PreparedStatement addAnimalStmt;
	private PreparedStatement deleteAllAnimalStmt;
	private PreparedStatement getAllAnimalStmt;
	private PreparedStatement exportAnimalStmt;
	
	private Statement statement;
	
	public AnimalManager() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null,null,null,null);
			
			boolean tableAnimalExists = false;
			boolean tableZooExists = false;
			
			
			while (rs.next()) {
				if ("Animal".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableAnimalExists = true;
					break;
				}
			}

			if (!tableAnimalExists)
				statement.executeUpdate(createTableAnimal);

			if (!tableZooExists)
				statement.executeUpdate(createTableZoo);
			
			
			addAnimalStmt = connection
					.prepareStatement("INSERT INTO Animal (name, kind, age) VALUES (?, ?, ?)");
			deleteAllAnimalStmt = connection
					.prepareStatement("DELETE FROM Animal");
			getAllAnimalStmt = connection
					.prepareStatement("SELECT id, name, kind, age FROM Animal");
			getAnimalsWithZooStmt = connection
					.prepareStatement("UPDATE Animal SET zoo_id=? WHERE id=?");
			
			} 
		
			catch (SQLException e) {
			e.printStackTrace();
			}
	}
	
	Connection getConnection() {
		return connection;
	}
	
	public int addAnimal(Animals animal) {
		int count = 0;
		try {
			addAnimalStmt.setString(1, animal.getName());
			addAnimalStmt.setDouble(2, animal.age());

			count = addAnimalStmt.executeUpdate();

		} 
		catch (SQLException e) {
			e.printStackTrace();
		}
			return count;
	}
	
	
	
	void deleteAnimals() {
		try {
			deleteAllAnimalStmt.executeUpdate();
			} 
		catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public List<Animals> getAllAnimals() {
		List<Animals> animals = new ArrayList<Animals>();

		try {
			ResultSet rs = getAllAnimalStmt.executeQuery();

			while (rs.next()) {
				Animals a = new Animals(null, createTableAnimal, 0);
				a.setId(rs.getInt("id"));
				a.setName(rs.getString("name"));
				a.setKind(rs.getString("kind"));
				a.setAge(rs.getDouble("age1"));
				animals.add(a);
			}

		} 
		catch (SQLException e) {
			e.printStackTrace();
		}
		return animals;
	}
	
	
	public int exportAnimal(Animals animal, Zoo zoo){
		int recordsUpdated = 0 ;
		try {
		exportAnimalStmt.setLong(1, animal.getId());
		exportAnimalStmt.setLong(2, zoo.getId());
		return exportAnimalStmt.executeUpdate();	
	}
	catch (SQLException e){
	e.printStackTrace();
	}
	return recordsUpdated;

	
	}	
}
